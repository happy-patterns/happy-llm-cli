id: app_2.3.1
name: '[Optional] Generate Provider Factory Code Snippet'
status: PENDING
type: AI_ASSISTED
depends_on:
- app_2.1.3
ai_details:
  model: o4-mini
  prompt: "Goal: Generate ONLY the Python code snippet for a simple factory function\
    \ `get_provider`.\nContext:\n  - Target file: `happy_llm_cli/providers/factory.py`.\n\
    \  - Returns: `AbstractProviderAdapter` instance.\n  - Inputs: `provider_name:\
    \ str`, `config: Dict[str, str]`.\n  - Logic: Handle 'openai' by instantiating\
    \ `OpenAIProvider`\n    (assume it exists); raise `NotImplementedError` otherwise.\n\
    \    Include basic API key check from config.\n  - Naming: Function `get_provider`,\
    \ classes `AbstractProviderAdapter`, `OpenAIProvider`.\nInstructions:\n  - Import\
    \ `AbstractProviderAdapter` from `..base`.\n  - Import `OpenAIProvider` from `..openai_provider`.\n\
    \  - Import `Dict` from `typing`.\n  - Define `get_provider(provider_name: str,\
    \ config: Dict[str, str]) -> AbstractProviderAdapter`.\n  - Implement minimal\
    \ `if/else` logic for 'openai' vs. others.\n  - Include `api_key = config.get('api_key')`\
    \ and `if not api_key: raise ValueError(...)`.\n  - Instantiate `OpenAIProvider`\
    \ correctly.\n  - Raise `NotImplementedError` for unknown providers.\n  - DO NOT\
    \ include any other code.\nOutput Format: Python code snippet for the factory\
    \ function and imports."
outputs:
- '[Optional] Python code snippet for `get_provider` factory generated.'
