id: 1
name: "Phase 0: Project Setup & Environment"
description: >
  Establish the core project structure, containerized development
  environment using Podman/Docker, initialize version control, and
  create basic configuration and documentation placeholders.
model: null
prompt_template: null

subtasks:
  - id: 1.1.1
    name: "Define Container Environment Files"
    details: |
      Create the `Containerfile` text content exactly as specified
      in the plan (Fedora base, non-root user, Python setup,
      initial dependencies if any, WORKDIR, permissions).
      Create the `.containerignore` file content exactly as specified
      in the plan.
    ai_assisted: false
    dependencies: []
    outputs:
      - "Text content for `Containerfile` prepared."
      - "Text content for `.containerignore` prepared."

  - id: 1.1.2
    name: "Write Container Environment Files"
    details: |
      Write the prepared content to `Containerfile` in the project root.
      Write the prepared content to `.containerignore` in the project root.
    ai_assisted: false
    dependencies:
      - 1.1.1
    outputs:
      - "`Containerfile` created in project root."
      - "`.containerignore` created in project root."

  - id: 1.1.3
    name: "Build Development Container Image"
    details: |
      Run the build command from the project root:
        podman build -t happy-llm-cli-dev -f Containerfile .
      Verify the build completes successfully without errors.
    ai_assisted: false
    dependencies:
      - 1.1.2
    outputs:
      - "Podman image `happy-llm-cli-dev:latest` built successfully."
      - "Build logs indicating success or failure."

  - id: 1.1.4
    name: "Document/Configure Container Runtime"
    details: |
      Determine the appropriate `podman run` command including:
      - `-v .:/home/devuser/app:Z`
      - `--env-file .env`
      - `-it --rm`
      - `--name happy_llm-dev-instance`
      Optionally add a VS Code Remote Containers config
      (`.devcontainer/devcontainer.json`). Document this
      in `CONTRIBUTING.md` or the development section of `README.md`.
    ai_assisted: false
    dependencies:
      - 1.1.2
    outputs:
      - "Documented command or config for running the dev container."

  - id: 1.2.1
    name: "Create Project Source Directories"
    details: |
      In your container (or mapped volume), run:
        mkdir -p happy_llm_cli/providers
        mkdir -p happy_llm_cli/utils
    ai_assisted: false
    dependencies:
      - 1.1.4
    outputs:
      - "Directory `happy_llm_cli/providers/` created."
      - "Directory `happy_llm_cli/utils/` created."

  - id: 1.2.2
    name: "Create Package Initializer Files"
    details: |
      In your container (or mapped volume), run:
        touch happy_llm_cli/__init__.py
        touch happy_llm_cli/providers/__init__.py
        touch happy_llm_cli/utils/__init__.py
    ai_assisted: false
    dependencies:
      - 1.2.1
    outputs:
      - "`__init__.py` added in `happy_llm_cli/`, `providers/`, `utils/`."

  - id: 1.3.1
    name: "Initialize Git Repository"
    details: |
      Run `git init` in the project root directory.
    ai_assisted: false
    dependencies: []
    outputs:
      - "Initialized empty Git repo in `.git/`."

  - id: 1.3.2
    name: "Generate .gitignore Content"
    details: |
      Generate a `.gitignore` for a Python project including:
      - `.venv/` & `.env`
      - `__pycache__/`, `*.pyc`, `*.pyo`
      - `build/`, `dist/`, `*.egg-info/`
      - `.vscode/`, `.idea/`
      - `*.log`
    ai_assisted: true
    model: "gpt-4.1-nano"
    prompt_template: |
      Goal: Generate a comprehensive .gitignore file for a Python project.
      Context:
        - Uses `.venv/`
        - Sensitive config in `.env` (must NOT be committed)
        - Standard Python artifacts, build artifacts, IDE folders,
          and logs should be ignored.
      Instructions:
        - List entries only; comments only if essential.
      Output Format: Plain text for `.gitignore`.
    dependencies:
      - 1.3.1
    outputs:
      - "Text content for `.gitignore` prepared."

  - id: 1.3.3
    name: "Write .gitignore File"
    details: |
      Write the generated content to `.gitignore` in the project root.
    ai_assisted: false
    dependencies:
      - 1.3.2
    outputs:
      - "`.gitignore` created in project root."

  - id: 1.3.4
    name: "Generate Initial README Content"
    details: |
      Generate minimal `README.md` including:
      - `# happy-llm-cli`
      - A single-sentence purpose statement.
    ai_assisted: true
    model: "gpt-4.1-nano"
    prompt_template: |
      Goal: Generate minimal initial content for README.md.
      Context:
        - Project: happy-llm-cli
        - Purpose: A Python CLI for interacting with LLMs via OpenAI
      Instructions:
        - Include only H1 title and one-sentence description.
      Output Format: Markdown text.
    dependencies:
      - 1.3.1
    outputs:
      - "Minimal markdown for `README.md` prepared."

  - id: 1.3.5
    name: "Write Initial README.md File"
    details: |
      Write the prepared content to `README.md` in the project root.
    ai_assisted: false
    dependencies:
      - 1.3.4
    outputs:
      - "`README.md` created in project root."

  - id: 1.3.6
    name: "Make Initial Git Commit"
    details: |
      Stage and commit new files:
        git add .
        git commit -m "Initial commit: project structure and environment setup"
    ai_assisted: false
    dependencies:
      - 1.3.1
      - 1.1.2
      - 1.3.3
      - 1.3.5
      - 1.2.2
    outputs:
      - "Initial commit in Git history."

  - id: 1.4.1
    name: "Verify Virtual Environment Activation"
    details: |
      Start the dev container as documented.
      Run `echo $PATH` and `which python` to confirm the venv is active.
    ai_assisted: false
    dependencies:
      - 1.1.3
      - 1.1.4
    outputs:
      - "Confirmed venv activation inside the container."

  - id: 1.4.2
    name: "Verify Initial Dependencies"
    details: |
      Inside the container, run `pip list` to confirm base deps are installed.
    ai_assisted: false
    dependencies:
      - 1.4.1
    outputs:
      - "Base dependencies present in venv."

  - id: 1.5.1
    name: "Create .env File (Host)"
    details: |
      On the host create `.env` with:
        OPENAI_API_KEY=sk-YourActualKeyPlaceholder
      Ensure it’s ignored by Git.
    ai_assisted: false
    dependencies:
      - 1.3.3
    outputs:
      - "`.env` created on host."

  - id: 1.5.2
    name: "Create .env.example File"
    details: |
      Create `.env.example` with:
        # OPENAI_API_KEY=Your_OpenAI_API_Key_Here
      Stage & commit it.
    ai_assisted: false
    dependencies:
      - 1.3.1
    outputs:
      - "`.env.example` created and committed."

  - id: 1.6.1
    name: "Create Documentation Directory"
    details: |
      Create a top-level `docs/` folder.
    ai_assisted: false
    dependencies: []
    outputs:
      - "`docs/` directory created."

  - id: 1.6.2
    name: "Generate Placeholder ARCHITECTURE.md"
    details: |
      Generate placeholder `docs/ARCHITECTURE.md` with H1 and
      H2s for each layer (CLI, Adapters, Config, Utils)
      plus a section on containerization.
    ai_assisted: true
    model: "gpt-4.1-nano"
    prompt_template: |
      Goal: Generate placeholder content for ARCHITECTURE.md.
      Context:
        - Layers: CLI (Typer), Adapters (ABC/Providers),
          Config (.env/dotenv), Utilities
        - Containerized environment
      Instructions:
        - H1 `# Architecture`
        - H2 per layer + `## Development Environment`
      Output Format: Markdown text.
    dependencies:
      - 1.6.1
    outputs:
      - "Markdown for `docs/ARCHITECTURE.md` prepared."

  - id: 1.6.3
    name: "Write Placeholder ARCHITECTURE.md"
    details: |
      Write the content to `docs/ARCHITECTURE.md` and commit.
    ai_assisted: false
    dependencies:
      - 1.6.2
      - 1.3.1
    outputs:
      - "`docs/ARCHITECTURE.md` created and committed."

  - id: 1.6.4
    name: "Create Placeholder CONTRIBUTING.md"
    details: |
      Add `docs/CONTRIBUTING.md` with:
        # Contributing

        Guidelines TBD
      Commit it.
    ai_assisted: false
    dependencies:
      - 1.6.1
      - 1.3.1
    outputs:
      - "`docs/CONTRIBUTING.md` created and committed."

  - id: 1.6.5
    name: "Create Placeholder CHANGELOG.md"
    details: |
      Add `docs/CHANGELOG.md` with:
        # Changelog

        ## [Unreleased]
      Commit it.
    ai_assisted: false
    dependencies:
      - 1.6.1
      - 1.3.1
    outputs:
      - "`docs/CHANGELOG.md` created and committed."

fallbacks:
  - task_id: 1.1.3
    strategy: "Review Containerfile syntax & base image issues, debug manually."
  - task_id: 1.3.2
    strategy: "Manually edit `.gitignore` using standard Python templates."
  - task_id: 1.6.2
    strategy: "Manually draft the outline in `docs/ARCHITECTURE.md`."

outputs:
  - "A functional containerized dev environment is built and runnable."
  - "An initialized Git repo with initial commit history."
  - "Standard project layout (`happy_llm_cli/`, `docs/`, `tests/`)."
  - "Core config files (`Containerfile`, `.containerignore`, `.gitignore`, `.env.example`, `.env`)."
  - "Placeholder docs (`README.md`, `ARCHITECTURE.md`, `CONTRIBUTING.md`, `CHANGELOG.md`)."
  - "Project ready for Phase 1: defining core abstractions."